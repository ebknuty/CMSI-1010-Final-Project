import pygame
import math
import warnings
pygame.init()

# This is to avoid certain warnings and glitches triggered by using some of the external game assets
warnings.filterwarnings("ignore",category = UserWarning, module = "PIL.PngImagePlugin")

SCREEN_WIDTH = 1000
SCREEN_HEIGHT = 1000
screen_size = (SCREEN_WIDTH, SCREEN_HEIGHT)
MAP_WIDTH = (2000)
MAP_HEIGHT = (2000)
player_start_pos = (600 , 600)
player_size = .15
player_speed = 20

display = pygame.display.set_mode(screen_size)
pygame.display.set_caption("2D shooter")



clock = pygame.time.Clock()



def create_background():
    background = pygame.transform.scale(pygame.image.load("Lords Of Pain/environment/ground.png.png").convert(), (MAP_HEIGHT,MAP_WIDTH))
    display.blit(background, (0,0))


class Player(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        try:
            self.image = pygame.transform.rotozoom(pygame.image.load("Premium top-down shooter asset pack\Player with AK.png").convert_alpha(), 0, player_size)
            # self.image = pygame.image.load("Premium top-down shooter asset pack\Player with AK.png").convert_alpha()
        except:
            self.image = pygame.Surface((50, 50))
            self.image.fill((255, 0, 0))  # red fallback
        self.rect = self.image.get_rect()
        self.rect.topleft = (player_start_pos)  # position on screen
        self.pos = pygame.math.Vector2(self.rect.topleft)
    def movementinputs(self):
        self.move_speedx = 0
        self.move_speedy = 0
        input = pygame.key.get_pressed()
        if input[pygame.K_w]:
            self.move_speedy -= player_speed
        elif input[pygame.K_a]:
            self.move_speedx -= player_speed
        elif input[pygame.K_s]:
            self.move_speedy += player_speed
        elif input[pygame.K_d]:
            self.move_speedx += player_speed
    def playermovement(self):
        self.pos += pygame.math.Vector2(self.move_speedx, self.move_speedy)
    def update(self):
        self.movementinputs()
        self.playermovement()
    
    

player = Player()
    


game_running = True
while game_running == True:

    clock.tick(60)

    
    create_background()
    display.blit(player.image,player.pos)
    player.update()

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            game_running = False


    pygame.display.update()


# Erin's Branch Gun Classes

class Bullet(pygame.sprite.Sprite):
    def __init__(self, pos, direction, speed=500, color=(255, 0, 0), radius=3):
        super().__init__()
        # Bullet logistics
        self.image = pygame.Surface((radius*2, radius*2), pygame.SRCALPHA)
        pygame.draw.circle(self.image, color, (radius, radius), radius)
        self.rect = self.image.get_rect(center=pos)
        self.velocity = pygame.math.Vector2(direction).normalize() * speed

    def update(self, dt):
        # Move bullet
        self.rect.x += self.velocity.x * dt
        self.rect.y += self.velocity.y * dt

        # Destroy bullet if it goes off-screen
        screen_rect = pygame.display.get_surface().get_rect()
        if not screen_rect.colliderect(self.rect):
            self.kill()

class Gun:
    def __init__(self, owner, clip_size, reload_time, cooldown_ms):
        self.owner = owner
        self.clip_size = clip_size
        self.ammo = clip_size
        self.reload_time = reload_time * 1000
        self.cooldown = cooldown_ms
        self.last_shot = 0
        self.is_reloading = False
        self.reload_start = 0

    def update(self):
        if self.is_reloading:
            now = pygame.time.get_ticks()
            if now - self.reload_start >= self.reload_time:
                self.ammo = self.clip_size
                self.is_reloading = False

    def reload(self):
        if not self.is_reloading and self.ammo < self.clip_size:
            self.is_reloading = True
            self.reload_start = pygame.time.get_ticks()

    def shoot(self, pos, direction, bullet_group):
        now = pygame.time.get_ticks()
        if self.is_reloading or self.ammo <= 0 or (now - self.last_shot) < self.cooldown:
            return None

        # Firing logistics
        self.last_shot = now
        self.ammo -= 1
        bullet = Bullet(pos, direction)
        bullet_group.add(bullet)
        return bullet

class Handgun(Gun):
    def __init__(self, owner):
        super().__init__(owner, clip_size=12, reload_time=1.5, cooldown_ms=400)

class AssaultRifle(Gun):
    def __init__(self, owner):
        super().__init__(owner, clip_size=30, reload_time=2.5, cooldown_ms=100)

class Shotgun(Gun):
    def __init__(self, owner):
        super().__init__(owner, clip_size=8, reload_time=2.0, cooldown_ms=800)
        self.pellets = 7
        self.spread_angle = 45

    def shoot(self, pos, direction, bullet_group):
        now = pygame.time.get_ticks()
        if self.is_reloading or self.ammo <= 0 or (now - self.last_shot) < self.cooldown:
            return None

        self.last_shot = now
        self.ammo -= 1

        dir_vec = pygame.math.Vector2(direction).normalize()
        base_angle = math.degrees(math.atan2(dir_vec.y, dir_vec.x))
        step = self.spread_angle / (self.pellets - 1)

        for i in range(self.pellets):
            angle = base_angle - (self.spread_angle / 2) + (i * step)
            rad = math.radians(angle)
            pellet_dir = pygame.math.Vector2(math.cos(rad), math.sin(rad))
            bullet_group.add(Bullet(pos, pellet_dir))

        return True

# Player Shooting Function
def handle_player_input(player, bullet_group):
# Left click to shoot, R to reload
    for event in pygame.event.get():
        if event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:
            mouse_pos = pygame.mouse.get_pos()
            direction = pygame.math.Vector2(mouse_pos) - player.rect.center
            player.gun.shoot(player.rect.center, direction, bullet_group)
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_r:
                player.gun.reload()