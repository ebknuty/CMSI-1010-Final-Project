import pygame
import math
import warnings
pygame.init()

# This is to avoid certain warnings and glitches triggered by using some of the external game assets
warnings.filterwarnings("ignore",category = UserWarning, module = "PIL.PngImagePlugin")

SCREEN_WIDTH = 1000
SCREEN_HEIGHT = 1000
screen_size = (SCREEN_WIDTH, SCREEN_HEIGHT)
MAP_WIDTH = (2000)
MAP_HEIGHT = (2000)
player_start_pos = (600 , 600)
player_size = .15
player_speed = 20

display = pygame.display.set_mode(screen_size)
pygame.display.set_caption("2D shooter")



clock = pygame.time.Clock()



def create_background():
    background = pygame.transform.scale(pygame.image.load("Lords Of Pain/environment/ground.png.png").convert(), (MAP_HEIGHT,MAP_WIDTH))
    display.blit(background, (0,0))


class Player(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        try:
            self.image = pygame.transform.rotozoom(pygame.image.load("Premium top-down shooter asset pack\Player with AK.png").convert_alpha(), 0, player_size)
            # self.image = pygame.image.load("Premium top-down shooter asset pack\Player with AK.png").convert_alpha()
        except:
            self.image = pygame.Surface((50, 50))
            self.image.fill((255, 0, 0))  # red fallback
        self.rect = self.image.get_rect()
        self.rect.topleft = (player_start_pos)  # position on screen
        self.pos = pygame.math.Vector2(self.rect.topleft)
    def movementinputs(self):
        self.move_speedx = 0
        self.move_speedy = 0
        input = pygame.key.get_pressed()
        if input[pygame.K_w]:
            self.move_speedy -= player_speed
        elif input[pygame.K_a]:
            self.move_speedx -= player_speed
        elif input[pygame.K_s]:
            self.move_speedy += player_speed
        elif input[pygame.K_d]:
            self.move_speedx += player_speed
    def playermovement(self):
        self.pos += pygame.math.Vector2(self.move_speedx, self.move_speedy)
    def update(self):
        self.movementinputs()
        self.playermovement()
    
    

player = Player()
    


game_running = True
while game_running == True:

    clock.tick(60)

    
    create_background()
    display.blit(player.image,player.pos)
    player.update()

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            game_running = False


    pygame.display.update()

